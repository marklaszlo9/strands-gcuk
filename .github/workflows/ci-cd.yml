name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  PYTHON_VERSION: '3.11'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov pytest-mock pyyaml
        pip install -r requirements.txt
    
    - name: Run unit tests
      run: |
        pytest tests/ -v --cov=. --cov-report=xml --cov-report=term-missing
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy
    
    - name: Run Black (code formatting)
      run: |
        black --check --diff .
    
    - name: Run isort (import sorting)
      run: |
        isort --check-only --diff .
    
    - name: Run flake8 (linting)
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Run mypy (type checking)
      run: |
        mypy --ignore-missing-imports custom_agent.py agent_cli.py || true

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
    
    - name: Run Bandit (security linting)
      run: |
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . --severity-level medium
    
    - name: Run Safety (dependency vulnerability check)
      run: |
        safety check --json --output safety-report.json || true
        safety check
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  infrastructure-validation:
    name: Validate Infrastructure
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install cfn-lint
      run: |
        pip install cfn-lint
    
    - name: Validate CloudFormation template
      run: |
        cfn-lint infrastructure/frontend-infrastructure.yaml
    
    - name: Check deployment scripts
      run: |
        # Check if scripts are executable
        test -x deploy-frontend.sh
        test -x update-lambda.sh
        
        # Basic syntax check for bash scripts
        bash -n deploy-frontend.sh
        bash -n update-lambda.sh

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, lint, security, infrastructure-validation]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    
    environment:
      name: staging
      url: ${{ steps.deploy.outputs.frontend_url }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Deploy to staging
      id: deploy
      run: |
        # Deploy infrastructure and frontend
        ./deploy-frontend.sh envision-agent-staging ${{ secrets.AGENT_RUNTIME_ARN }}
        
        # Get outputs
        FRONTEND_URL=$(aws cloudformation describe-stacks \
          --stack-name envision-agent-staging \
          --query 'Stacks[0].Outputs[?OutputKey==`FrontendURL`].OutputValue' \
          --output text)
        
        echo "frontend_url=$FRONTEND_URL" >> $GITHUB_OUTPUT
    
    - name: Run smoke tests
      run: |
        # Wait for deployment to be ready
        sleep 30
        
        # Test API Gateway endpoint
        API_URL=$(aws cloudformation describe-stacks \
          --stack-name envision-agent-staging \
          --query 'Stacks[0].Outputs[?OutputKey==`ApiGatewayURL`].OutputValue' \
          --output text)
        
        # Test OPTIONS request (CORS)
        curl -X OPTIONS "$API_URL" \
          -H "Origin: https://example.com" \
          -f -s -o /dev/null
        
        echo "Smoke tests passed!"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, lint, security, infrastructure-validation]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    environment:
      name: production
      url: ${{ steps.deploy.outputs.frontend_url }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Deploy to production
      id: deploy
      run: |
        # Deploy infrastructure and frontend
        ./deploy-frontend.sh envision-agent-frontend ${{ secrets.AGENT_RUNTIME_ARN_PROD }}
        
        # Get outputs
        FRONTEND_URL=$(aws cloudformation describe-stacks \
          --stack-name envision-agent-frontend \
          --query 'Stacks[0].Outputs[?OutputKey==`FrontendURL`].OutputValue' \
          --output text)
        
        echo "frontend_url=$FRONTEND_URL" >> $GITHUB_OUTPUT
    
    - name: Run production smoke tests
      run: |
        # Wait for deployment to be ready
        sleep 60
        
        # Test API Gateway endpoint
        API_URL=$(aws cloudformation describe-stacks \
          --stack-name envision-agent-frontend \
          --query 'Stacks[0].Outputs[?OutputKey==`ApiGatewayURL`].OutputValue' \
          --output text)
        
        # Test OPTIONS request (CORS)
        curl -X OPTIONS "$API_URL" \
          -H "Origin: https://example.com" \
          -f -s -o /dev/null
        
        # Test POST request
        curl -X POST "$API_URL" \
          -H "Content-Type: application/json" \
          -H "Origin: https://example.com" \
          -d '{"prompt": "Hello"}' \
          -f -s -o /dev/null
        
        echo "Production smoke tests passed!"
    
    - name: Notify deployment success
      if: success()
      run: |
        echo "ðŸš€ Production deployment successful!"
        echo "Frontend URL: ${{ steps.deploy.outputs.frontend_url }}"

  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    if: always()
    needs: [test, lint, security, infrastructure-validation]
    
    steps:
    - name: Clean up artifacts
      run: |
        echo "Cleaning up temporary files and artifacts..."
        # Add any cleanup commands here if needed